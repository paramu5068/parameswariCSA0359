#include <stdio.h>
#include <stdlib.h>

#define SIZE 10


struct HashTable {
    int *array;
    int capacity;
};

struct HashTable *createHashTable(int capacity) {
    struct HashTable *hashTable = (struct HashTable *)malloc(sizeof(struct HashTable));
    hashTable->capacity = capacity;
    hashTable->array = (int *)malloc(hashTable->capacity * sizeof(int));

    for (int i = 0; i < hashTable->capacity; i++) {
        hashTable->array[i] = -1;
    }

    return hashTable;
}


int hash(int key, int capacity) {
    return key % capacity;
}


void insert(struct HashTable *hashTable, int key) {
    int index = hash(key, hashTable->capacity);

    
    while (hashTable->array[index] != -1) {
        index = (index + 1) % hashTable->capacity;
    }

    hashTable->array[index] = key;
}


void display(struct HashTable *hashTable) {
    printf("Hash Table:\n");
    for (int i = 0; i < hashTable->capacity; i++) {
        if (hashTable->array[i] != -1) {
            printf("%d --> %d\n", i, hashTable->array[i]);
        } else {
            printf("%d\n", i);
        }
    }
}

int main() {
    
    struct HashTable *hashTable = createHashTable(SIZE);

    
    insert(hashTable, 5);
    insert(hashTable, 25);
    insert(hashTable, 15);
    insert(hashTable, 35);
    insert(hashTable, 10);
    insert(hashTable, 20);

    
    display(hashTable);

    return 0;
}
